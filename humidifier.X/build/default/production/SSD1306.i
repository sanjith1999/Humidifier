# 1 "SSD1306.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 288 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "D:/MPLAB IDE/packs/Microchip/PIC12-16F1xxx_DFP/1.3.90/xc8\\pic\\include\\language_support.h" 1 3
# 2 "<built-in>" 2
# 1 "SSD1306.c" 2
# 26 "SSD1306.c"
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\stdint.h" 1 3



# 1 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\musl_xc8.h" 1 3
# 4 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\stdint.h" 2 3
# 22 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\stdint.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\bits/alltypes.h" 1 3
# 127 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\bits/alltypes.h" 3
typedef unsigned long uintptr_t;
# 142 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\bits/alltypes.h" 3
typedef long intptr_t;
# 158 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\bits/alltypes.h" 3
typedef signed char int8_t;




typedef short int16_t;




typedef __int24 int24_t;




typedef long int32_t;





typedef long long int64_t;
# 188 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\bits/alltypes.h" 3
typedef long long intmax_t;





typedef unsigned char uint8_t;




typedef unsigned short uint16_t;




typedef __uint24 uint24_t;




typedef unsigned long uint32_t;





typedef unsigned long long uint64_t;
# 229 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\bits/alltypes.h" 3
typedef unsigned long long uintmax_t;
# 22 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\stdint.h" 2 3


typedef int8_t int_fast8_t;

typedef int64_t int_fast64_t;


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;

typedef int24_t int_least24_t;
typedef int24_t int_fast24_t;

typedef int32_t int_least32_t;

typedef int64_t int_least64_t;


typedef uint8_t uint_fast8_t;

typedef uint64_t uint_fast64_t;


typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;

typedef uint24_t uint_least24_t;
typedef uint24_t uint_fast24_t;

typedef uint32_t uint_least32_t;

typedef uint64_t uint_least64_t;
# 144 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\stdint.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\bits/stdint.h" 1 3
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
# 144 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\stdint.h" 2 3
# 26 "SSD1306.c" 2

# 1 "C:\\Program Files\\Microchip\\xc8\\v2.40\\pic\\include\\c99\\stdbool.h" 1 3
# 27 "SSD1306.c" 2
# 101 "SSD1306.c"
uint8_t _vccstate,
        rotation = 0;

uint8_t _i2caddr;

uint8_t
_width,
_height;






void SSD1306_begin(uint8_t vccstate, uint8_t i2caddr);


void drawPixel(uint8_t x, uint8_t y, uint8_t color);
void drawHLine(uint8_t x, uint8_t y, uint8_t w, uint8_t color);
void drawVLine(uint8_t x, uint8_t y, uint8_t h, uint8_t color);
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color);

void setRotation(uint8_t m);
void fillScreen(void);
void display_clear(void);
void display_dim(_Bool dim);
void display(void);
void invertDisplay(_Bool inv);

void display_startScrollRight(uint8_t start, uint8_t stop);
void display_startScrollLeft(uint8_t start, uint8_t stop);
void display_startScrollDiagRight(uint8_t start, uint8_t stop);
void display_startScrollDiagLeft(uint8_t start, uint8_t stop);
void display_stopScroll(void);

void drawFastHLineInternal(uint8_t x, uint8_t y, uint8_t w, uint8_t color);
void drawFastVLineInternal(uint8_t x, uint8_t __y, uint8_t __h, uint8_t color);


void ssd1306_command(uint8_t c);


static uint8_t ssd1306_buffer[64 * 128 / 8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF

    ,
    0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
    0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x8C, 0x8E, 0x84, 0x00, 0x00, 0x80, 0xF8,
    0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80,
    0x00, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC7, 0x01, 0x01,
    0x01, 0x01, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x7C, 0xFE, 0xC7, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF,
    0xFF, 0xFF, 0x00, 0x38, 0xFE, 0xC7, 0x83, 0x01, 0x01, 0x01, 0x83, 0xC7, 0xFF, 0xFF, 0x00, 0x00,
    0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x7F, 0xFF,
    0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF,
    0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x8F,
    0x8F, 0x9F, 0xBF, 0xFF, 0xFF, 0xC3, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC,
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x01, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01,
    0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00,
    0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03,
    0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    ,
    0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F,
    0x87, 0xC7, 0xF7, 0xFF, 0xFF, 0x1F, 0x1F, 0x3D, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0x7C, 0x7D, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x30, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F,
    0x0F, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00,
    0x00, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0xF0, 0xF8, 0x1C, 0x0E,
    0x06, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC,
    0xFE, 0xFC, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0xE6, 0xCE, 0x84, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x06,
    0x06, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xC0, 0xF8,
    0xFC, 0x4E, 0x46, 0x46, 0x46, 0x4E, 0x7C, 0x78, 0x40, 0x18, 0x3C, 0x76, 0xE6, 0xCE, 0xCC, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00,
    0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C,
    0x18, 0x18, 0x0C, 0x06, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x0C, 0x18, 0x0C, 0x0F,
    0x07, 0x01, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
    0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x07,
    0x07, 0x0C, 0x0C, 0x18, 0x1C, 0x0C, 0x06, 0x06, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


};

void ssd1306_command(uint8_t c) {







    uint8_t control = 0x00;
    I2C_Begin();
    I2C_Write(_i2caddr);
    I2C_Write(control);
    I2C_Write(c);
    I2C_End();

}






void SSD1306_begin(uint8_t vccstate, uint8_t i2caddr) {
    _i2caddr = i2caddr;

    _vccstate = vccstate;
    delay_ms(10);
# 265 "SSD1306.c"
    ssd1306_command(0xAE);
    ssd1306_command(0xD5);
    ssd1306_command(0x80);

    ssd1306_command(0xA8);
    ssd1306_command(64 - 1);

    ssd1306_command(0xD3);
    ssd1306_command(0x0);
    ssd1306_command(0x40 | 0x0);
    ssd1306_command(0x8D);
    if (vccstate == 0x01) {
        ssd1306_command(0x10);
    } else {
        ssd1306_command(0x14);
    }
    ssd1306_command(0x20);
    ssd1306_command(0x00);
    ssd1306_command(0xA0 | 0x1);
    ssd1306_command(0xC8);
# 293 "SSD1306.c"
    ssd1306_command(0xDA);
    ssd1306_command(0x12);
    ssd1306_command(0x81);
    if (vccstate == 0x01) {
        ssd1306_command(0x9F);
    } else {
        ssd1306_command(0xCF);
    }
# 314 "SSD1306.c"
    ssd1306_command(0xD9);
    if (vccstate == 0x01) {
        ssd1306_command(0x22);
    } else {
        ssd1306_command(0xF1);
    }
    ssd1306_command(0xDB);
    ssd1306_command(0x40);
    ssd1306_command(0xA4);
    ssd1306_command(0xA6);

    ssd1306_command(0x2E);

    ssd1306_command(0xAF);

    _height = 64;
    _width = 128;
}



void drawPixel(uint8_t x, uint8_t y, uint8_t color) {
    if ((x >= _width) || (y >= _height))
        return;


    switch (rotation) {
        case 1:
            { uint8_t t = x; x = y; y = t; };
            x = 128 - x - 1;
            break;
        case 2:
            x = 128 - x - 1;
            y = 64 - y - 1;
            break;
        case 3:
            { uint8_t t = x; x = y; y = t; };
            y = 64 - y - 1;
            break;
    }


    switch (color) {
        case 1: ssd1306_buffer[x + (uint16_t) (y / 8) * 128] |= (1 << (y & 7));
            break;
        case 0: ssd1306_buffer[x + (uint16_t) (y / 8) * 128] &= ~(1 << (y & 7));
            break;
        case 2: ssd1306_buffer[x + (uint16_t) (y / 8) * 128] ^= (1 << (y & 7));
            break;
    }

}






void display_startScrollRight(uint8_t start, uint8_t stop) {
    ssd1306_command(0x26);
    ssd1306_command(0X00);
    ssd1306_command(start);
    ssd1306_command(0X00);
    ssd1306_command(stop);
    ssd1306_command(0X00);
    ssd1306_command(0XFF);
    ssd1306_command(0x2F);
}






void display_startScrollLeft(uint8_t start, uint8_t stop) {
    ssd1306_command(0x27);
    ssd1306_command(0X00);
    ssd1306_command(start);
    ssd1306_command(0X00);
    ssd1306_command(stop);
    ssd1306_command(0X00);
    ssd1306_command(0XFF);
    ssd1306_command(0x2F);
}






void display_startScrollDiagRight(uint8_t start, uint8_t stop) {
    ssd1306_command(0xA3);
    ssd1306_command(0X00);
    ssd1306_command(64);
    ssd1306_command(0x29);
    ssd1306_command(0X00);
    ssd1306_command(start);
    ssd1306_command(0X00);
    ssd1306_command(stop);
    ssd1306_command(0X01);
    ssd1306_command(0x2F);
}






void display_startScrollDiagLeft(uint8_t start, uint8_t stop) {
    ssd1306_command(0xA3);
    ssd1306_command(0X00);
    ssd1306_command(64);
    ssd1306_command(0x2A);
    ssd1306_command(0X00);
    ssd1306_command(start);
    ssd1306_command(0X00);
    ssd1306_command(stop);
    ssd1306_command(0X01);
    ssd1306_command(0x2F);
}

void display_stopScroll(void) {
    ssd1306_command(0x2E);
}





void display_dim(_Bool dim) {
    uint8_t contrast;
    if (dim)
        contrast = 0;
    else {
        if (_vccstate == 0x01)
            contrast = 0x9F;
        else
            contrast = 0xCF;
    }


    ssd1306_command(0x81);
    ssd1306_command(contrast);
}

void display(void) {
    uint16_t i;
    ssd1306_command(0x21);
    ssd1306_command(0);
    ssd1306_command(128 - 1);

    ssd1306_command(0x22);
    ssd1306_command(0);

    ssd1306_command(7);
# 477 "SSD1306.c"
    for (i = 0; i < (128 * 64 / 8); i++) {
        uint8_t x;






        I2C_Begin();
        I2C_Write(_i2caddr);
        I2C_Write(0x40);
        for (x = 0; x < 16; x++) {
            I2C_Write(ssd1306_buffer[i]);
            i++;
        }
        i--;
        I2C_End();

    }
}

void display_clear(void) {
    uint16_t i;
    for (i = 0; i < (128 * 64 / 8); i++)
        ssd1306_buffer[i] = 0;
}

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color) {
    uint8_t i;
    for (i = x; i < x + w; i++)
        drawVLine(i, y, h, color);
}

void fillScreen(void) {
    fillRect(0, 0, 128, 64, 1);
}



void invertDisplay(_Bool i) {
    if (i)
        ssd1306_command(0xA7);
    else
        ssd1306_command(0xA6);
}

void setRotation(uint8_t m) {
    rotation = (m & 3);
    switch (rotation) {
        case 0:
        case 2:
            _width = 128;
            _height = 64;
            break;
        case 1:
        case 3:
            _width = 64;
            _height = 128;
            break;
    }
}

void drawHLine(uint8_t x, uint8_t y, uint8_t w, uint8_t color) {
    _Bool bSwap = 0;
    switch (rotation) {
        case 0:

            break;
        case 1:

            bSwap = 1;
            { uint8_t t = x; x = y; y = t; };
            x = 128 - x - 1;
            break;
        case 2:

            x = 128 - x - 1;
            y = 64 - y - 1;
            x -= (w - 1);
            break;
        case 3:

            bSwap = 1;
            { uint8_t t = x; x = y; y = t; };
            y = 64 - y - 1;
            y -= (w - 1);
            break;
    }

    if (bSwap) {
        drawFastVLineInternal(x, y, w, color);
    } else {
        drawFastHLineInternal(x, y, w, color);
    }
}

void drawFastHLineInternal(uint8_t x, uint8_t y, uint8_t w, uint8_t color) {
    register uint8_t *pBuf, mask;

    if (y >= 64) {
        return;
    }


    if ((x + w) > 128) {
        w = (128 - x);
    }


    pBuf = ssd1306_buffer;

    pBuf += ((uint16_t) (y / 8) * 128);

    pBuf += x;

    mask = 1 << (y & 7);

    switch (color) {
        case 1: while (w--) {
                *pBuf++ |= mask;
            };
            break;
        case 0: mask = ~mask;
            while (w--) {
                *pBuf++ &= mask;
            };
            break;
        case 2: while (w--) {
                *pBuf++ ^= mask;
            };
            break;
    }
}

void drawVLine(uint8_t x, uint8_t y, uint8_t h, uint8_t color) {
    _Bool bSwap = 0;
    switch (rotation) {
        case 0:
            break;
        case 1:

            bSwap = 1;
            { uint8_t t = x; x = y; y = t; };
            x = 128 - x - 1;
            x -= (h - 1);
            break;
        case 2:

            x = 128 - x - 1;
            y = 64 - y - 1;
            y -= (h - 1);
            break;
        case 3:

            bSwap = 1;
            { uint8_t t = x; x = y; y = t; };
            y = 64 - y - 1;
            break;
    }

    if (bSwap) {
        drawFastHLineInternal(x, y, h, color);
    } else {
        drawFastVLineInternal(x, y, h, color);
    }
}

void drawFastVLineInternal(uint8_t x, uint8_t __y, uint8_t __h, uint8_t color) {

    register uint8_t *pBuf, mod, y, h, mask;
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};

    if (x >= 128) {
        return;
    }


    if ((__y + __h) > 64) {
        __h = (64 - __y);
    }


    y = __y;
    h = __h;


    pBuf = ssd1306_buffer;

    pBuf += ((uint16_t) (y / 8) * 128);

    pBuf += x;


    mod = (y & 7);
    if (mod) {

        mod = 8 - mod;

        mask = premask[mod];


        if (h < mod) {
            mask &= (0XFF >> (mod - h));
        }

        switch (color) {
            case 1: *pBuf |= mask;
                break;
            case 0: *pBuf &= ~mask;
                break;
            case 2: *pBuf ^= mask;
                break;
        }


        if (h < mod) {
            return;
        }

        h -= mod;

        pBuf += 128;
    }



    if (h >= 8) {
        if (color == 2) {
            do {
                *pBuf = ~(*pBuf);


                pBuf += 128;


                h -= 8;
            } while (h >= 8);
        } else {

            register uint8_t val = (color == 1) ? 255 : 0;

            do {

                *pBuf = val;


                pBuf += 128;


                h -= 8;
            } while (h >= 8);
        }
    }


    if (h) {



        static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F};
        register uint8_t mask;
        mod = h & 7;
        mask = postmask[mod];
        switch (color) {
            case 1: *pBuf |= mask;
                break;
            case 0: *pBuf &= ~mask;
                break;
            case 2: *pBuf ^= mask;
                break;
        }
    }
}
